import networkx as nx

from src.cpg_query import mu, can_follow

def double_free(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "AF"]

    detected_instances = [(None, None, None, None)]
    
    for x in V_prime:
        b = mu(nodes_dir, "dest", x)
        if b is None:
            continue
        dealloc_b = [v for v in V if CPG.has_edge(x, v) and mu(nodes_dir, "type", v) == "DF" and mu(nodes_dir, "dealloc_buff", v) == b]
        for v in dealloc_b:
            for u in dealloc_b:
                if not can_follow(CPG, u, v):
                    continue
                REALLOC_FLAG = False
                for w in V_prime:
                    if mu(nodes_dir, "dest", w) != b:
                        continue
                    if not can_follow(CPG, u, w):
                        continue
                    if not can_follow(CPG, w, v):
                        continue
                    REALLOC_FLAG = True
                    break
                if REALLOC_FLAG:
                    continue               
                detected_instances.append(("double_free", b, x, u, v))
    
    return detected_instances

def use_after_free(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "AF"]

    detected_instances = [(None, None, None, None)]

    for x in V_prime:
        b = mu(nodes_dir, "dest", x)
        if b is None:
            continue
        dealloc_b = [v for v in V if CPG.has_edge(x, v) and mu(nodes_dir, "type", v) == "DF" and mu(nodes_dir, "dealloc_buff", v) == b]
        def_b_node_ids = [edge[1] for edge in CPG.out_edges(x) if CPG.get_edge_data(edge[0], edge[1])["label"] == "DEF" and CPG.get_edge_data(edge[0], edge[1])["symbol"] == b]
        if len(def_b_node_ids) == 0:
            continue
        y = def_b_node_ids[0] * 2
        if not CPG.has_node(y):
            continue
        use_b = [edge[0] for edge in CPG.in_edges(y)]
        for v in use_b:
            for u in dealloc_b:
                if not can_follow(CPG, u, v):
                    continue
                REALLOC_FLAG = False
                for w in V_prime:
                    if mu(nodes_dir, "dest", w) != b:
                        continue
                    if not can_follow(CPG, u, w):
                        continue
                    if not can_follow(CPG, w, v):
                        continue
                    REALLOC_FLAG = True
                    break
                if REALLOC_FLAG:
                    continue
                detected_instances.append(("use_after_free", b, x, u, v))
    
    return detected_instances

if __name__ == "__main__":
    pass