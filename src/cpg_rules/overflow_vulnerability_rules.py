import networkx as nx

from node_query import mu

def incorr_calc_buff_size(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    for v in V_prime:
        d = mu(nodes_dir, "arg_dest", v)
        n = mu(nodes_dir, "arg_count", v)

        in_data_dest = []
        for edge in CPG.in_edges(v):
            u = edge[0]
            edge_data = CPG.get_edge_data(u, v)
            if edge_data["label"] != "REACHES":
                continue
            var = edge_data["var"]
            if var == d:
                in_data_dest.append(u)

        for u in in_data_dest:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if n <= len_d:
                continue
            return "incorr_calc_buff_size", d, u, v
    
    return None, None, None, None

def buff_access_src_size(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    for v in V_prime:
        d = mu(nodes_dir, "arg_dest", v)
        s = mu(nodes_dir, "arg_src", v)
        n = mu(nodes_dir, "arg_count", v)

        in_data_src = []
        for edge in CPG.in_edges(v):
            u = edge[0]
            edge_data = CPG.get_edge_data(u, v)
            if edge_data["label"] != "REACHES":
                continue
            var = edge_data["var"]
            if var == s:
                in_data_src.append(u)
        
        len_s = set()
        for u in in_data_src:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_s.add(mu(nodes_dir, "len", u))
        
        in_data_dest = []
        for edge in CPG.in_edges(v):
            u = edge[0]
            edge_data = CPG.get_edge_data(u, v)
            if edge_data["label"] != "REACHES":
                continue
            var = edge_data["var"]
            if var == d:
                in_data_dest.append(u)

        for u in in_data_dest:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if n <= len_d:
                continue
            if n not in len_s:
                continue
            return "buff_access_src_size", d, s, u, v
    
    return None, None, None, None, None

def off_by_one(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    for v in V_prime:
        d = mu(nodes_dir, "arg_dest", v)
        n = mu(nodes_dir, "arg_count", v)

        in_data_dest = []
        for edge in CPG.in_edges(v):
            u = edge[0]
            edge_data = CPG.get_edge_data(u, v)
            if edge_data["label"] != "REACHES":
                continue
            var = edge_data["var"]
            if var == d:
                in_data_dest.append(u)

        for u in in_data_dest:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if n != len_d + 1:
                continue
            return "off_by_one", d, u, v
    
    return None, None, None, None

def buff_overread(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "CF"]

    for v in V_prime:
        s = mu(nodes_dir, "arg_src", v)
        n = mu(nodes_dir, "arg_count", v)

        in_data_src = []
        for edge in CPG.in_edges(v):
            u = edge[0]
            edge_data = CPG.get_edge_data(u, v)
            if edge_data["label"] != "REACHES":
                continue
            var = edge_data["var"]
            if var == s:
                in_data_src.append(u)

        for u in in_data_src:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if n <= len_d:
                continue
            return "buff_overread", s, u, v
    
    return None, None, None, None

if __name__ == "__main__":
    pass