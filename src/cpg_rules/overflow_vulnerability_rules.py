import networkx as nx

from src.common_utils import replace_substring_with_spaces
from src.cpg_query import mu, get_incoming_dd_edges_for_var

def incorr_calc_buff_size(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    detected_instances = [(None, None, None, None)]

    for v in V_prime:
        d = mu(nodes_dir, "arg_dest", v)
        n = mu(nodes_dir, "arg_count", v, CPG=CPG)

        if n == -2147483648:
            continue

        in_data_dest = get_incoming_dd_edges_for_var(CPG, v, d)
        for u in in_data_dest:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if len_d == -2147483648:
                continue
            if n <= len_d:
                continue
            detected_instances.append(("incorr_calc_buff_size", d, u, v))
    
    return detected_instances

def buff_access_src_size(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    detected_instances = [(None, None, None, None, None)]

    for v in V_prime:
        d = mu(nodes_dir, "arg_dest", v)
        s = mu(nodes_dir, "arg_src", v)
        n = mu(nodes_dir, "arg_count", v, CPG=CPG)

        if n == -2147483648:
            continue

        in_data_src = get_incoming_dd_edges_for_var(CPG, v, s)
        len_s = set()
        len_s_line_map = dict()
        for u in in_data_src:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            defined_length = mu(nodes_dir, "len", u)
            if defined_length == -2147483648:
                continue
            len_s.add(defined_length)
            len_s_line_map[str(defined_length)] = u
        
        in_data_dest = get_incoming_dd_edges_for_var(CPG, v, d)
        for u in in_data_dest:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_d = mu(nodes_dir, "len", u)
            if len_d == -2147483648:
                continue
            if n <= len_d:
                continue
            if n not in len_s:
                continue
            detected_instances.append(("buff_access_src_size", d, s, u, v, len_s_line_map[str(n)]))
    
    return detected_instances

def off_by_one(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "WF"]

    detected_instances = [(None, None, None, None)]
    
    for v in V_prime:
        s = mu(nodes_dir, "arg_src", v)
        n = mu(nodes_dir, "arg_count", v, CPG=CPG)

        if n == -2147483648:
            continue

        in_data_src = get_incoming_dd_edges_for_var(CPG, v, s)
        for u in in_data_src:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_s = mu(nodes_dir, "len", u)
            if len_s == -2147483648:
                continue
            if n != len_s + 1:
                continue
            detected_instances.append(("off_by_one", s, u, v))
    
    return detected_instances

def buff_overread(nodes_dir: str, CPG: nx.DiGraph):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) in ["CF", "WF"]]

    detected_instances = [(None, None, None, None)]
    
    for v in V_prime:
        s = mu(nodes_dir, "arg_src", v)
        byte_count_str = mu(nodes_dir, "arg_count_str", v, CPG=CPG)
        n = mu(nodes_dir, "arg_count", v, CPG=CPG)

        if n == -2147483648:
            continue

        in_data_src = get_incoming_dd_edges_for_var(CPG, v, s)
        for u in in_data_src:
            if mu(nodes_dir, "type", u) != "AF" and mu(nodes_dir, "type", u) != "AD":
                continue
            len_s = mu(nodes_dir, "len", u)
            if len_s == -2147483648:
                continue
            if n <= len_s:
                continue
            detected_instances.append(("buff_overread", s, u, v, replace_substring_with_spaces(byte_count_str, " ", "")))
    
    return detected_instances

if __name__ == "__main__":
    pass