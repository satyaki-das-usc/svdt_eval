import networkx as nx

from typing import List
from src.cpg_query import mu

def sensi_read(nodes_dir: str, CPG: nx.DiGraph, Y: List):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "SRF"]

    detected_instances = [(None, None, None, None)]

    for v in V_prime:
        if v not in Y:
            continue
        called_sensi_func = mu(nodes_dir, "sensi_read_callee", v)
        detected_instances.append(("sensi_read", v, called_sensi_func))
    return detected_instances

def sensi_write(nodes_dir: str, CPG: nx.DiGraph, Y: List):
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) in ["WF", "SWF"]]

    detected_instances = [(None, None, None, None)]

    for v in V_prime:
        if v not in Y:
            continue
        called_sensi_func = mu(nodes_dir, "sensi_write_callee", v)
        detected_instances.append(("sensi_write", v, called_sensi_func))
    return detected_instances

if __name__ == "__main__":
    pass