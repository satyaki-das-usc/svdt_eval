import networkx as nx

from os.path import join

from common_utils import read_csv
from cpg_query import mu, get_line_nodes, get_incoming_cd_edges

def node_has_minimum_check(cpg_node, idx_var):
    operator = cpg_node["operator"].strip()
    operand1, operand2 = [operand.replace("(", "").replace(")", "").strip() for operand in cpg_node["code"].split(operator, maxsplit=1)]
    
    if operator == "<":
        if operand1 != "-1":
            return False
        if operand2 != idx_var:
            return False
    elif operator == "<=":
        if operand1 != "0":
            return False
        if operand2 != idx_var:
            return False
    elif operator == ">":
        if operand1 != idx_var:
            return False
        if operand2 != "-1":
            return False
    elif operator == ">=":
        if operand1 != idx_var:
            return False
        if operand2 != "0":
            return False
    
    return True

def line_has_minimum_check(joern_nodes, v, idx):
    line_nodes = get_line_nodes(joern_nodes, v)
    rel_expr_nodes = [node for node in line_nodes if node["type"] == "RelationalExpression"]
    for node in rel_expr_nodes:
        if not node_has_minimum_check(node, idx):
            continue
        return True
    
    return False

def buff_underwrite(nodes_dir: str, CPG: nx.DiGraph):
    nodes_path = join(nodes_dir, "nodes.csv")
    joern_nodes = read_csv(nodes_path)
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "AIW"]

    detected_instances = [(None, None, None, None)]

    for v in V_prime:
        b, idx = mu(nodes_dir, "arr_idx", v)
        
        in_ctrl_v = get_incoming_cd_edges(CPG, v)
        for u in in_ctrl_v:
            if mu(nodes_dir, "type", u) != "RE":
                continue
            if not line_has_minimum_check(joern_nodes, u, idx):
                continue
            
        detected_instances.append(("buff_underwrite", v, b, idx))
    
    return detected_instances

def buff_underread(nodes_dir: str, CPG: nx.DiGraph):
    nodes_path = join(nodes_dir, "nodes.csv")
    joern_nodes = read_csv(nodes_path)
    V = CPG.nodes
    V_prime = [v for v in V if mu(nodes_dir, "type", v) == "AIR"]

    detected_instances = [(None, None, None, None)]
    for v in V_prime:
        b, idx = mu(nodes_dir, "arr_idx", v)
        
        in_ctrl_v = get_incoming_cd_edges(CPG, v)
        for u in in_ctrl_v:
            if mu(nodes_dir, "type", u) != "RE":
                continue
            if not line_has_minimum_check(joern_nodes, u, idx):
                continue
            
        detected_instances.append(("buff_underread", v, b, idx))
    
    return detected_instances

if __name__ == "__main__":
    pass